/* tslint:disable */
/* eslint-disable */
/**
 * Tunis Events API
 * API publique pour les événements de Tunis.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Badges
 */
export interface Badges {
    /**
     * 
     * @type {boolean}
     * @memberof Badges
     */
    'approvalRequired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Badges
     */
    'noTickets'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Badges
     */
    'hiddenTickets'?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof Badges
     */
    'prices'?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof Badges
     */
    'cashless'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Badges
     */
    'almostFull'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Badges
     */
    'completelySold'?: boolean;
}
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    'isExt'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'description'?: string;
    /**
     * 
     * @type {Organization}
     * @memberof Event
     */
    'organization'?: Organization;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'endDate'?: string;
    /**
     * 
     * @type {Venue}
     * @memberof Event
     */
    'venue'?: Venue;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    'hiddenVenue'?: boolean;
    /**
     * 
     * @type {Image}
     * @memberof Event
     */
    'image'?: Image;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'link'?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'tags'?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'type'?: string;
    /**
     * 
     * @type {object}
     * @memberof Event
     */
    'theme'?: object;
    /**
     * 
     * @type {Badges}
     * @memberof Event
     */
    'badges'?: Badges;
}
/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'path'?: string;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'height'?: number;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'filename'?: string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'mimetype'?: string;
}
/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'description'?: string | null;
    /**
     * 
     * @type {OrganizationAdditionalInformation}
     * @memberof Organization
     */
    'additionalInformation'?: OrganizationAdditionalInformation;
    /**
     * 
     * @type {Array<string>}
     * @memberof Organization
     */
    'categories'?: Array<string> | null;
    /**
     * 
     * @type {Image}
     * @memberof Organization
     */
    'image'?: Image;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'subdomain'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Organization
     */
    'published'?: boolean;
}
/**
 * 
 * @export
 * @interface OrganizationAdditionalInformation
 */
export interface OrganizationAdditionalInformation {
    /**
     * 
     * @type {string}
     * @memberof OrganizationAdditionalInformation
     */
    'infoPhone'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationAdditionalInformation
     */
    'resaPhone'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationAdditionalInformation
     */
    'adminPhone'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationAdditionalInformation
     */
    'afterSalePhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationAdditionalInformation
     */
    'facebookPageUrl'?: string;
}
/**
 * 
 * @export
 * @interface Venue
 */
export interface Venue {
    /**
     * 
     * @type {string}
     * @memberof Venue
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Venue
     */
    'rating'?: number;
    /**
     * 
     * @type {number}
     * @memberof Venue
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof Venue
     */
    'longitude'?: number;
    /**
     * 
     * @type {string}
     * @memberof Venue
     */
    'formatted_address'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retourne une liste d\'événements.
         * @summary Obtenir la liste des événements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Retourne une liste d\'événements.
         * @summary Obtenir la liste des événements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvents(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvents(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Retourne une liste d\'événements.
         * @summary Obtenir la liste des événements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.getEvents(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Retourne une liste d\'événements.
     * @summary Obtenir la liste des événements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEvents(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEvents(options).then((request) => request(this.axios, this.basePath));
    }
}



